// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef PROTOBUF_query_2eproto__INCLUDED
#define PROTOBUF_query_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_query_2eproto();
void protobuf_AssignDesc_query_2eproto();
void protobuf_ShutdownFile_query_2eproto();

class QueryUsersRequest;
class QueryUsersResponse;

// ===================================================================

class QueryUsersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryUsersRequest) */ {
 public:
  QueryUsersRequest();
  virtual ~QueryUsersRequest();

  QueryUsersRequest(const QueryUsersRequest& from);

  inline QueryUsersRequest& operator=(const QueryUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUsersRequest& default_instance();

  void Swap(QueryUsersRequest* other);

  // implements Message ----------------------------------------------

  inline QueryUsersRequest* New() const { return New(NULL); }

  QueryUsersRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUsersRequest& from);
  void MergeFrom(const QueryUsersRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUsersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string query = 1;
  int query_size() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query(int index) const;
  ::std::string* mutable_query(int index);
  void set_query(int index, const ::std::string& value);
  void set_query(int index, const char* value);
  void set_query(int index, const char* value, size_t size);
  ::std::string* add_query();
  void add_query(const ::std::string& value);
  void add_query(const char* value);
  void add_query(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& query() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_query();

  // @@protoc_insertion_point(class_scope:QueryUsersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> query_;
  friend void  protobuf_AddDesc_query_2eproto();
  friend void protobuf_AssignDesc_query_2eproto();
  friend void protobuf_ShutdownFile_query_2eproto();

  void InitAsDefaultInstance();
  static QueryUsersRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryUsersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryUsersResponse) */ {
 public:
  QueryUsersResponse();
  virtual ~QueryUsersResponse();

  QueryUsersResponse(const QueryUsersResponse& from);

  inline QueryUsersResponse& operator=(const QueryUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUsersResponse& default_instance();

  void Swap(QueryUsersResponse* other);

  // implements Message ----------------------------------------------

  inline QueryUsersResponse* New() const { return New(NULL); }

  QueryUsersResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUsersResponse& from);
  void MergeFrom(const QueryUsersResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUsersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id(int index) const;
  void set_id(int index, ::google::protobuf::int32 value);
  void add_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string fullname = 3;
  int fullname_size() const;
  void clear_fullname();
  static const int kFullnameFieldNumber = 3;
  const ::std::string& fullname(int index) const;
  ::std::string* mutable_fullname(int index);
  void set_fullname(int index, const ::std::string& value);
  void set_fullname(int index, const char* value);
  void set_fullname(int index, const char* value, size_t size);
  ::std::string* add_fullname();
  void add_fullname(const ::std::string& value);
  void add_fullname(const char* value);
  void add_fullname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fullname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fullname();

  // repeated string password = 4;
  int password_size() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password(int index) const;
  ::std::string* mutable_password(int index);
  void set_password(int index, const ::std::string& value);
  void set_password(int index, const char* value);
  void set_password(int index, const char* value, size_t size);
  ::std::string* add_password();
  void add_password(const ::std::string& value);
  void add_password(const char* value);
  void add_password(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& password() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_password();

  // @@protoc_insertion_point(class_scope:QueryUsersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fullname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> password_;
  friend void  protobuf_AddDesc_query_2eproto();
  friend void protobuf_AssignDesc_query_2eproto();
  friend void protobuf_ShutdownFile_query_2eproto();

  void InitAsDefaultInstance();
  static QueryUsersResponse* default_instance_;
};
// ===================================================================

class QueryService_Stub;

class QueryService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline QueryService() {};
 public:
  virtual ~QueryService();

  typedef QueryService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void QueryUsers(::google::protobuf::RpcController* controller,
                       const ::QueryUsersRequest* request,
                       ::QueryUsersResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueryService);
};

class QueryService_Stub : public QueryService {
 public:
  QueryService_Stub(::google::protobuf::RpcChannel* channel);
  QueryService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~QueryService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements QueryService ------------------------------------------

  void QueryUsers(::google::protobuf::RpcController* controller,
                       const ::QueryUsersRequest* request,
                       ::QueryUsersResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueryService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUsersRequest

// repeated string query = 1;
inline int QueryUsersRequest::query_size() const {
  return query_.size();
}
inline void QueryUsersRequest::clear_query() {
  query_.Clear();
}
inline const ::std::string& QueryUsersRequest::query(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersRequest.query)
  return query_.Get(index);
}
inline ::std::string* QueryUsersRequest::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersRequest.query)
  return query_.Mutable(index);
}
inline void QueryUsersRequest::set_query(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersRequest.query)
  query_.Mutable(index)->assign(value);
}
inline void QueryUsersRequest::set_query(int index, const char* value) {
  query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersRequest.query)
}
inline void QueryUsersRequest::set_query(int index, const char* value, size_t size) {
  query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersRequest.query)
}
inline ::std::string* QueryUsersRequest::add_query() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersRequest.query)
  return query_.Add();
}
inline void QueryUsersRequest::add_query(const ::std::string& value) {
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersRequest.query)
}
inline void QueryUsersRequest::add_query(const char* value) {
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersRequest.query)
}
inline void QueryUsersRequest::add_query(const char* value, size_t size) {
  query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersRequest.query)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersRequest::query() const {
  // @@protoc_insertion_point(field_list:QueryUsersRequest.query)
  return query_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersRequest.query)
  return &query_;
}

// -------------------------------------------------------------------

// QueryUsersResponse

// repeated int32 id = 1;
inline int QueryUsersResponse::id_size() const {
  return id_.size();
}
inline void QueryUsersResponse::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 QueryUsersResponse::id(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.id)
  return id_.Get(index);
}
inline void QueryUsersResponse::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:QueryUsersResponse.id)
}
inline void QueryUsersResponse::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryUsersResponse::id() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryUsersResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.id)
  return &id_;
}

// repeated string name = 2;
inline int QueryUsersResponse::name_size() const {
  return name_.size();
}
inline void QueryUsersResponse::clear_name() {
  name_.Clear();
}
inline const ::std::string& QueryUsersResponse::name(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.name)
  return name_.Get(index);
}
inline ::std::string* QueryUsersResponse::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.name)
  return name_.Mutable(index);
}
inline void QueryUsersResponse::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.name)
  name_.Mutable(index)->assign(value);
}
inline void QueryUsersResponse::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.name)
}
inline void QueryUsersResponse::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.name)
}
inline ::std::string* QueryUsersResponse::add_name() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.name)
  return name_.Add();
}
inline void QueryUsersResponse::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.name)
}
inline void QueryUsersResponse::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.name)
}
inline void QueryUsersResponse::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::name() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.name)
  return &name_;
}

// repeated string fullname = 3;
inline int QueryUsersResponse::fullname_size() const {
  return fullname_.size();
}
inline void QueryUsersResponse::clear_fullname() {
  fullname_.Clear();
}
inline const ::std::string& QueryUsersResponse::fullname(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.fullname)
  return fullname_.Get(index);
}
inline ::std::string* QueryUsersResponse::mutable_fullname(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.fullname)
  return fullname_.Mutable(index);
}
inline void QueryUsersResponse::set_fullname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.fullname)
  fullname_.Mutable(index)->assign(value);
}
inline void QueryUsersResponse::set_fullname(int index, const char* value) {
  fullname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.fullname)
}
inline void QueryUsersResponse::set_fullname(int index, const char* value, size_t size) {
  fullname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.fullname)
}
inline ::std::string* QueryUsersResponse::add_fullname() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.fullname)
  return fullname_.Add();
}
inline void QueryUsersResponse::add_fullname(const ::std::string& value) {
  fullname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.fullname)
}
inline void QueryUsersResponse::add_fullname(const char* value) {
  fullname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.fullname)
}
inline void QueryUsersResponse::add_fullname(const char* value, size_t size) {
  fullname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.fullname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::fullname() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.fullname)
  return fullname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.fullname)
  return &fullname_;
}

// repeated string password = 4;
inline int QueryUsersResponse::password_size() const {
  return password_.size();
}
inline void QueryUsersResponse::clear_password() {
  password_.Clear();
}
inline const ::std::string& QueryUsersResponse::password(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.password)
  return password_.Get(index);
}
inline ::std::string* QueryUsersResponse::mutable_password(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.password)
  return password_.Mutable(index);
}
inline void QueryUsersResponse::set_password(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.password)
  password_.Mutable(index)->assign(value);
}
inline void QueryUsersResponse::set_password(int index, const char* value) {
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.password)
}
inline void QueryUsersResponse::set_password(int index, const char* value, size_t size) {
  password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.password)
}
inline ::std::string* QueryUsersResponse::add_password() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.password)
  return password_.Add();
}
inline void QueryUsersResponse::add_password(const ::std::string& value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.password)
}
inline void QueryUsersResponse::add_password(const char* value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.password)
}
inline void QueryUsersResponse::add_password(const char* value, size_t size) {
  password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.password)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::password() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.password)
  return password_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_password() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.password)
  return &password_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_query_2eproto__INCLUDED
