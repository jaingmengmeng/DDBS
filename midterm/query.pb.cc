// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QueryUsersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUsersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUsersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUsersResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* QueryService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_query_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_query_2eproto() {
  protobuf_AddDesc_query_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "query.proto");
  GOOGLE_CHECK(file != NULL);
  QueryUsersRequest_descriptor_ = file->message_type(0);
  static const int QueryUsersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersRequest, query_),
  };
  QueryUsersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUsersRequest_descriptor_,
      QueryUsersRequest::default_instance_,
      QueryUsersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUsersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersRequest, _internal_metadata_),
      -1);
  QueryUsersResponse_descriptor_ = file->message_type(1);
  static const int QueryUsersResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, password_),
  };
  QueryUsersResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUsersResponse_descriptor_,
      QueryUsersResponse::default_instance_,
      QueryUsersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUsersResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsersResponse, _internal_metadata_),
      -1);
  QueryService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_query_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUsersRequest_descriptor_, &QueryUsersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUsersResponse_descriptor_, &QueryUsersResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_query_2eproto() {
  delete QueryUsersRequest::default_instance_;
  delete QueryUsersRequest_reflection_;
  delete QueryUsersResponse::default_instance_;
  delete QueryUsersResponse_reflection_;
}

void protobuf_AddDesc_query_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_query_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013query.proto\"\"\n\021QueryUsersRequest\022\r\n\005qu"
    "ery\030\001 \003(\t\"R\n\022QueryUsersResponse\022\n\n\002id\030\001 "
    "\003(\005\022\014\n\004name\030\002 \003(\t\022\020\n\010fullname\030\003 \003(\t\022\020\n\010p"
    "assword\030\004 \003(\t2E\n\014QueryService\0225\n\nQueryUs"
    "ers\022\022.QueryUsersRequest\032\023.QueryUsersResp"
    "onseB\003\200\001\001", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "query.proto", &protobuf_RegisterTypes);
  QueryUsersRequest::default_instance_ = new QueryUsersRequest();
  QueryUsersResponse::default_instance_ = new QueryUsersResponse();
  QueryUsersRequest::default_instance_->InitAsDefaultInstance();
  QueryUsersResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_query_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_query_2eproto {
  StaticDescriptorInitializer_query_2eproto() {
    protobuf_AddDesc_query_2eproto();
  }
} static_descriptor_initializer_query_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUsersRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUsersRequest::QueryUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryUsersRequest)
}

void QueryUsersRequest::InitAsDefaultInstance() {
}

QueryUsersRequest::QueryUsersRequest(const QueryUsersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryUsersRequest)
}

void QueryUsersRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUsersRequest::~QueryUsersRequest() {
  // @@protoc_insertion_point(destructor:QueryUsersRequest)
  SharedDtor();
}

void QueryUsersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUsersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUsersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUsersRequest_descriptor_;
}

const QueryUsersRequest& QueryUsersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_query_2eproto();
  return *default_instance_;
}

QueryUsersRequest* QueryUsersRequest::default_instance_ = NULL;

QueryUsersRequest* QueryUsersRequest::New(::google::protobuf::Arena* arena) const {
  QueryUsersRequest* n = new QueryUsersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryUsersRequest)
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryUsersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string query = 1;
      case 1: {
        if (tag == 10) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query(this->query_size() - 1).data(),
            this->query(this->query_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QueryUsersRequest.query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryUsersRequest)
  return false;
#undef DO_
}

void QueryUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryUsersRequest)
  // repeated string query = 1;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query(i).data(), this->query(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryUsersRequest)
}

::google::protobuf::uint8* QueryUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryUsersRequest)
  // repeated string query = 1;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query(i).data(), this->query(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersRequest.query");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->query(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryUsersRequest)
  return target;
}

int QueryUsersRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QueryUsersRequest)
  int total_size = 0;

  // repeated string query = 1;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->query(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryUsersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUsersRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryUsersRequest)
    MergeFrom(*source);
  }
}

void QueryUsersRequest::MergeFrom(const QueryUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryUsersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  query_.MergeFrom(from.query_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUsersRequest::CopyFrom(const QueryUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsersRequest::IsInitialized() const {

  return true;
}

void QueryUsersRequest::Swap(QueryUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUsersRequest::InternalSwap(QueryUsersRequest* other) {
  query_.UnsafeArenaSwap(&other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUsersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUsersRequest_descriptor_;
  metadata.reflection = QueryUsersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUsersRequest

// repeated string query = 1;
int QueryUsersRequest::query_size() const {
  return query_.size();
}
void QueryUsersRequest::clear_query() {
  query_.Clear();
}
 const ::std::string& QueryUsersRequest::query(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersRequest.query)
  return query_.Get(index);
}
 ::std::string* QueryUsersRequest::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersRequest.query)
  return query_.Mutable(index);
}
 void QueryUsersRequest::set_query(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersRequest.query)
  query_.Mutable(index)->assign(value);
}
 void QueryUsersRequest::set_query(int index, const char* value) {
  query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersRequest.query)
}
 void QueryUsersRequest::set_query(int index, const char* value, size_t size) {
  query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersRequest.query)
}
 ::std::string* QueryUsersRequest::add_query() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersRequest.query)
  return query_.Add();
}
 void QueryUsersRequest::add_query(const ::std::string& value) {
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersRequest.query)
}
 void QueryUsersRequest::add_query(const char* value) {
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersRequest.query)
}
 void QueryUsersRequest::add_query(const char* value, size_t size) {
  query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersRequest.query)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersRequest::query() const {
  // @@protoc_insertion_point(field_list:QueryUsersRequest.query)
  return query_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersRequest.query)
  return &query_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUsersResponse::kIdFieldNumber;
const int QueryUsersResponse::kNameFieldNumber;
const int QueryUsersResponse::kFullnameFieldNumber;
const int QueryUsersResponse::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUsersResponse::QueryUsersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryUsersResponse)
}

void QueryUsersResponse::InitAsDefaultInstance() {
}

QueryUsersResponse::QueryUsersResponse(const QueryUsersResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryUsersResponse)
}

void QueryUsersResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUsersResponse::~QueryUsersResponse() {
  // @@protoc_insertion_point(destructor:QueryUsersResponse)
  SharedDtor();
}

void QueryUsersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUsersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUsersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUsersResponse_descriptor_;
}

const QueryUsersResponse& QueryUsersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_query_2eproto();
  return *default_instance_;
}

QueryUsersResponse* QueryUsersResponse::default_instance_ = NULL;

QueryUsersResponse* QueryUsersResponse::New(::google::protobuf::Arena* arena) const {
  QueryUsersResponse* n = new QueryUsersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryUsersResponse)
  id_.Clear();
  name_.Clear();
  fullname_.Clear();
  password_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUsersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryUsersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QueryUsersResponse.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_fullname;
        break;
      }

      // repeated string fullname = 3;
      case 3: {
        if (tag == 26) {
         parse_fullname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullname(this->fullname_size() - 1).data(),
            this->fullname(this->fullname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QueryUsersResponse.fullname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fullname;
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // repeated string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password(this->password_size() - 1).data(),
            this->password(this->password_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QueryUsersResponse.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryUsersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryUsersResponse)
  return false;
#undef DO_
}

void QueryUsersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryUsersResponse)
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  // repeated string fullname = 3;
  for (int i = 0; i < this->fullname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullname(i).data(), this->fullname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fullname(i), output);
  }

  // repeated string password = 4;
  for (int i = 0; i < this->password_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password(i).data(), this->password(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.password");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryUsersResponse)
}

::google::protobuf::uint8* QueryUsersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryUsersResponse)
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  // repeated string fullname = 3;
  for (int i = 0; i < this->fullname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullname(i).data(), this->fullname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.fullname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fullname(i), target);
  }

  // repeated string password = 4;
  for (int i = 0; i < this->password_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password(i).data(), this->password(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QueryUsersResponse.password");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->password(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryUsersResponse)
  return target;
}

int QueryUsersResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QueryUsersResponse)
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated string fullname = 3;
  total_size += 1 * this->fullname_size();
  for (int i = 0; i < this->fullname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fullname(i));
  }

  // repeated string password = 4;
  total_size += 1 * this->password_size();
  for (int i = 0; i < this->password_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->password(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUsersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryUsersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUsersResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUsersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryUsersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryUsersResponse)
    MergeFrom(*source);
  }
}

void QueryUsersResponse::MergeFrom(const QueryUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryUsersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
  name_.MergeFrom(from.name_);
  fullname_.MergeFrom(from.fullname_);
  password_.MergeFrom(from.password_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUsersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUsersResponse::CopyFrom(const QueryUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsersResponse::IsInitialized() const {

  return true;
}

void QueryUsersResponse::Swap(QueryUsersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUsersResponse::InternalSwap(QueryUsersResponse* other) {
  id_.UnsafeArenaSwap(&other->id_);
  name_.UnsafeArenaSwap(&other->name_);
  fullname_.UnsafeArenaSwap(&other->fullname_);
  password_.UnsafeArenaSwap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUsersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUsersResponse_descriptor_;
  metadata.reflection = QueryUsersResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUsersResponse

// repeated int32 id = 1;
int QueryUsersResponse::id_size() const {
  return id_.size();
}
void QueryUsersResponse::clear_id() {
  id_.Clear();
}
 ::google::protobuf::int32 QueryUsersResponse::id(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.id)
  return id_.Get(index);
}
 void QueryUsersResponse::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:QueryUsersResponse.id)
}
 void QueryUsersResponse::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryUsersResponse::id() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.id)
  return id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryUsersResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.id)
  return &id_;
}

// repeated string name = 2;
int QueryUsersResponse::name_size() const {
  return name_.size();
}
void QueryUsersResponse::clear_name() {
  name_.Clear();
}
 const ::std::string& QueryUsersResponse::name(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.name)
  return name_.Get(index);
}
 ::std::string* QueryUsersResponse::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.name)
  return name_.Mutable(index);
}
 void QueryUsersResponse::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.name)
  name_.Mutable(index)->assign(value);
}
 void QueryUsersResponse::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.name)
}
 void QueryUsersResponse::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.name)
}
 ::std::string* QueryUsersResponse::add_name() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.name)
  return name_.Add();
}
 void QueryUsersResponse::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.name)
}
 void QueryUsersResponse::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.name)
}
 void QueryUsersResponse::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::name() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.name)
  return &name_;
}

// repeated string fullname = 3;
int QueryUsersResponse::fullname_size() const {
  return fullname_.size();
}
void QueryUsersResponse::clear_fullname() {
  fullname_.Clear();
}
 const ::std::string& QueryUsersResponse::fullname(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.fullname)
  return fullname_.Get(index);
}
 ::std::string* QueryUsersResponse::mutable_fullname(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.fullname)
  return fullname_.Mutable(index);
}
 void QueryUsersResponse::set_fullname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.fullname)
  fullname_.Mutable(index)->assign(value);
}
 void QueryUsersResponse::set_fullname(int index, const char* value) {
  fullname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.fullname)
}
 void QueryUsersResponse::set_fullname(int index, const char* value, size_t size) {
  fullname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.fullname)
}
 ::std::string* QueryUsersResponse::add_fullname() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.fullname)
  return fullname_.Add();
}
 void QueryUsersResponse::add_fullname(const ::std::string& value) {
  fullname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.fullname)
}
 void QueryUsersResponse::add_fullname(const char* value) {
  fullname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.fullname)
}
 void QueryUsersResponse::add_fullname(const char* value, size_t size) {
  fullname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.fullname)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::fullname() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.fullname)
  return fullname_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.fullname)
  return &fullname_;
}

// repeated string password = 4;
int QueryUsersResponse::password_size() const {
  return password_.size();
}
void QueryUsersResponse::clear_password() {
  password_.Clear();
}
 const ::std::string& QueryUsersResponse::password(int index) const {
  // @@protoc_insertion_point(field_get:QueryUsersResponse.password)
  return password_.Get(index);
}
 ::std::string* QueryUsersResponse::mutable_password(int index) {
  // @@protoc_insertion_point(field_mutable:QueryUsersResponse.password)
  return password_.Mutable(index);
}
 void QueryUsersResponse::set_password(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryUsersResponse.password)
  password_.Mutable(index)->assign(value);
}
 void QueryUsersResponse::set_password(int index, const char* value) {
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryUsersResponse.password)
}
 void QueryUsersResponse::set_password(int index, const char* value, size_t size) {
  password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryUsersResponse.password)
}
 ::std::string* QueryUsersResponse::add_password() {
  // @@protoc_insertion_point(field_add_mutable:QueryUsersResponse.password)
  return password_.Add();
}
 void QueryUsersResponse::add_password(const ::std::string& value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryUsersResponse.password)
}
 void QueryUsersResponse::add_password(const char* value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryUsersResponse.password)
}
 void QueryUsersResponse::add_password(const char* value, size_t size) {
  password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryUsersResponse.password)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsersResponse::password() const {
  // @@protoc_insertion_point(field_list:QueryUsersResponse.password)
  return password_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsersResponse::mutable_password() {
  // @@protoc_insertion_point(field_mutable_list:QueryUsersResponse.password)
  return &password_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

QueryService::~QueryService() {}

const ::google::protobuf::ServiceDescriptor* QueryService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* QueryService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryService_descriptor_;
}

void QueryService::QueryUsers(::google::protobuf::RpcController* controller,
                         const ::QueryUsersRequest*,
                         ::QueryUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryUsers() not implemented.");
  done->Run();
}

void QueryService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), QueryService_descriptor_);
  switch(method->index()) {
    case 0:
      QueryUsers(controller,
             ::google::protobuf::down_cast<const ::QueryUsersRequest*>(request),
             ::google::protobuf::down_cast< ::QueryUsersResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& QueryService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::QueryUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& QueryService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::QueryUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueryService_Stub::QueryService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueryService_Stub::QueryService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
QueryService_Stub::~QueryService_Stub() {
  if (owns_channel_) delete channel_;
}

void QueryService_Stub::QueryUsers(::google::protobuf::RpcController* controller,
                              const ::QueryUsersRequest* request,
                              ::QueryUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
